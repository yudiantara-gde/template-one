/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {

	text-decoration: none;

	&:#{$where} {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		font-family: FontAwesome;
		font-style: normal;
		font-weight: normal;
		text-transform: none !important;

	}

}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

	@if $important {
		$important: '!important';
	}

	$x: 0.1em;

	@if unit(_size(element-margin)) == 'rem' {
		$x: 0.1rem;
	}

	padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max($x, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

	$svg: str-replace($svg, '"', '\'');
	$svg: str-replace($svg, '%', '%25');
	$svg: str-replace($svg, '<', '%3C');
	$svg: str-replace($svg, '>', '%3E');
	$svg: str-replace($svg, '&', '%26');
	$svg: str-replace($svg, '#', '%23');
	$svg: str-replace($svg, '{', '%7B');
	$svg: str-replace($svg, '}', '%7D');
	$svg: str-replace($svg, ';', '%3B');

	@return url("data:image/svg+xml;charset=utf8,#{$svg}");

}

//mixin clearfix if we have float position
@mixin clearfix() {
	&::before,
	&::after {
	  display: block;
	  clear: both;
	  content: "";
	}
}

//mixin row if we want make traditional grid
@mixin row($padding) {
  margin-left: $padding;
  margin-right: $padding;
  @include clearfix;
}

//mixin font face
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote(#{$path-font}$path+'.'+$format)) format(quote($format)), comma);
		//$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

//mixin opacity
@mixin opacity($choice, $rgba, $opacity, $border-val: null, $border-type: null) {
	@if $choice == 'background' {

		background : rgba($rgba, $opacity);
	}@else if $choice == 'color' {

		color : rgba($rgba, $opacity);
	}@else if $choice == 'border' {

		border: $border-val $border-type rgba($rgba, $opacity);
	}@else if $choice == 'bacground-color' {

		background-color: rgba($rgba, $opacity);
	}
}

//mixin border opacity
@mixin border-opacity($color, $opacity) {
	$opacity: $opacity / 100;
	
	border-color: $color;

	border-color: rgba($color, $opacity);

	-moz-background-clip: padding;
	-webkit-background-clip: padding;
	background-clip: padding-box;
}

//mixin text clamps
@mixin textClamps($height, $line) {

	overflow: hidden;
	//text-overflow: ellipsis;
	max-height: $height;
	display: -webkit-box;
	-webkit-line-clamp: $line;
	-webkit-box-orient: vertical;
}

@mixin notextClamps() {
	overflow: initial;
	display: block;
	-webkit-line-clamp: initial;
	-webkit-box-orient: initial;
	text-overflow: initial;
	max-height: 100%;

	&:after {display: none;}
}

//mixin clamps
@mixin the-camps($line, $line-height, $bg) {
	display: -webkit-box;
	-webkit-line-clamp: $line;
	-webkit-box-orient: vertical;  
	overflow: hidden;  
	text-overflow: ellipsis;
	max-height: calc(#{$line-height} * #{$line});

	&:after {
		position: absolute;
		content: '...';
		text-align: center;
		bottom: 0;
		right: 0;
		display: block;
		width: 11%;
		height: $line-height;
		background: $bg;
	}
}
  